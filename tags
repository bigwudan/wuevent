!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALL_DATA_READ	http-internal.h	/^	ALL_DATA_READ = 1,$/;"	e	enum:message_read_status
CA_FILE	test_http.c	24;"	d	file:
CIRCLEQ_EMPTY	sys/queue.h	401;"	d
CIRCLEQ_END	sys/queue.h	398;"	d
CIRCLEQ_ENTRY	sys/queue.h	387;"	d
CIRCLEQ_FIRST	sys/queue.h	396;"	d
CIRCLEQ_FOREACH	sys/queue.h	404;"	d
CIRCLEQ_FOREACH_REVERSE	sys/queue.h	409;"	d
CIRCLEQ_HEAD	sys/queue.h	378;"	d
CIRCLEQ_HEAD_INITIALIZER	sys/queue.h	384;"	d
CIRCLEQ_INIT	sys/queue.h	417;"	d
CIRCLEQ_INSERT_AFTER	sys/queue.h	422;"	d
CIRCLEQ_INSERT_BEFORE	sys/queue.h	432;"	d
CIRCLEQ_INSERT_HEAD	sys/queue.h	442;"	d
CIRCLEQ_INSERT_TAIL	sys/queue.h	452;"	d
CIRCLEQ_LAST	sys/queue.h	397;"	d
CIRCLEQ_NEXT	sys/queue.h	399;"	d
CIRCLEQ_PREV	sys/queue.h	400;"	d
CIRCLEQ_REMOVE	sys/queue.h	462;"	d
CIRCLEQ_REPLACE	sys/queue.h	475;"	d
CLIENT_CERT	test_http.c	26;"	d	file:
CLIENT_KEY	test_http.c	25;"	d	file:
CLOCK_PROF	sys/_libevent_time.h	156;"	d
CLOCK_REALTIME	sys/_libevent_time.h	154;"	d
CLOCK_VIRTUAL	sys/_libevent_time.h	155;"	d
DATA_CORRUPTED	http-internal.h	/^	DATA_CORRUPTED = -1,$/;"	e	enum:message_read_status
DST_AUST	sys/_libevent_time.h	72;"	d
DST_CAN	sys/_libevent_time.h	76;"	d
DST_EET	sys/_libevent_time.h	75;"	d
DST_MET	sys/_libevent_time.h	74;"	d
DST_NONE	sys/_libevent_time.h	70;"	d
DST_USA	sys/_libevent_time.h	71;"	d
DST_WET	sys/_libevent_time.h	73;"	d
ERR_FORMAT	http.c	1325;"	d	file:
ERR_FORMAT	http.c	1344;"	d	file:
ERR_FORMAT	http.c	721;"	d	file:
ERR_FORMAT	http.c	740;"	d	file:
EVBUFFER_DATA	event.h	281;"	d
EVBUFFER_EOF	event.h	118;"	d
EVBUFFER_ERROR	event.h	119;"	d
EVBUFFER_INPUT	event.h	282;"	d
EVBUFFER_LENGTH	event.h	280;"	d
EVBUFFER_MAX_READ	buffer.c	298;"	d	file:
EVBUFFER_OUTPUT	event.h	283;"	d
EVBUFFER_READ	event.h	116;"	d
EVBUFFER_TIMEOUT	event.h	120;"	d
EVBUFFER_WRITE	event.h	117;"	d
EVCON_CONNECTING	http-internal.h	/^    EVCON_CONNECTING,   \/**< tries to currently connect *\/$/;"	e	enum:evhttp_connection_state
EVCON_DISCONNECTED	http-internal.h	/^    EVCON_DISCONNECTED, \/**< not currently connected not trying either*\/$/;"	e	enum:evhttp_connection_state
EVCON_HTTP_EOF	http-internal.h	/^	EVCON_HTTP_EOF,$/;"	e	enum:evhttp_connection_error
EVCON_HTTP_INVALID_HEADER	http-internal.h	/^	EVCON_HTTP_INVALID_HEADER$/;"	e	enum:evhttp_connection_error
EVCON_HTTP_TIMEOUT	http-internal.h	/^	EVCON_HTTP_TIMEOUT,$/;"	e	enum:evhttp_connection_error
EVCON_IDLE	http-internal.h	/^    EVCON_IDLE,     \/**< connection is established *\/$/;"	e	enum:evhttp_connection_state
EVCON_READING_BODY	http-internal.h	/^    EVCON_READING_BODY, \/**< reading request\/response body *\/$/;"	e	enum:evhttp_connection_state
EVCON_READING_FIRSTLINE	http-internal.h	/^    EVCON_READING_FIRSTLINE,\/**< reading Request-Line (incoming conn) or$/;"	e	enum:evhttp_connection_state
EVCON_READING_HEADERS	http-internal.h	/^    EVCON_READING_HEADERS,  \/**< reading request\/response headers *\/$/;"	e	enum:evhttp_connection_state
EVCON_READING_TRAILER	http-internal.h	/^    EVCON_READING_TRAILER,  \/**< reading request\/response chunked trailer *\/$/;"	e	enum:evhttp_connection_state
EVCON_WRITING	http-internal.h	/^    EVCON_WRITING       \/**< writing request\/response headers\/body *\/$/;"	e	enum:evhttp_connection_state
EVENT_FD	event.h	89;"	d
EVENT_SIGNAL	event.h	88;"	d
EVHTTP_BASE_SET	http.c	21;"	d	file:
EVHTTP_CON_CLOSEDETECT	http-internal.h	59;"	d
EVHTTP_CON_INCOMING	http-internal.h	57;"	d
EVHTTP_CON_OUTGOING	http-internal.h	58;"	d
EVHTTP_PROXY_REQUEST	evhttp.h	37;"	d
EVHTTP_REQUEST	evhttp.h	/^enum evhttp_request_kind { EVHTTP_REQUEST, EVHTTP_RESPONSE };$/;"	e	enum:evhttp_request_kind
EVHTTP_REQ_GET	evhttp.h	/^enum evhttp_cmd_type { EVHTTP_REQ_GET, EVHTTP_REQ_POST, EVHTTP_REQ_HEAD };$/;"	e	enum:evhttp_cmd_type
EVHTTP_REQ_HEAD	evhttp.h	/^enum evhttp_cmd_type { EVHTTP_REQ_GET, EVHTTP_REQ_POST, EVHTTP_REQ_HEAD };$/;"	e	enum:evhttp_cmd_type
EVHTTP_REQ_OWN_CONNECTION	evhttp.h	36;"	d
EVHTTP_REQ_POST	evhttp.h	/^enum evhttp_cmd_type { EVHTTP_REQ_GET, EVHTTP_REQ_POST, EVHTTP_REQ_HEAD };$/;"	e	enum:evhttp_cmd_type
EVHTTP_RESPONSE	evhttp.h	/^enum evhttp_request_kind { EVHTTP_REQUEST, EVHTTP_RESPONSE };$/;"	e	enum:evhttp_request_kind
EVLIST_ACTIVE	event.h	23;"	d
EVLIST_ALL	event.h	28;"	d
EVLIST_INIT	event.h	25;"	d
EVLIST_INSERTED	event.h	21;"	d
EVLIST_INTERNAL	event.h	24;"	d
EVLIST_SIGNAL	event.h	22;"	d
EVLIST_TIMEOUT	event.h	20;"	d
EVLOOP_NONBLOCK	event.h	112;"	d
EVLOOP_ONCE	event.h	111;"	d
EVUTIL_CLOSESOCKET	evutil.h	60;"	d
EVUTIL_SET_SOCKET_ERROR	evutil.h	69;"	d
EVUTIL_SOCKET_ERROR	evutil.h	68;"	d
EV_PERSIST	event.h	36;"	d
EV_READ	event.h	33;"	d
EV_SIGNAL	event.h	35;"	d
EV_TIMEOUT	event.h	32;"	d
EV_WRITE	event.h	34;"	d
FD_CLOSEONEXEC	epoll.c	58;"	d	file:
FD_CLOSEONEXEC	epoll.c	63;"	d	file:
FD_CLOSEONEXEC	signal.c	26;"	d	file:
HTTP_BADREQUEST	evhttp.h	14;"	d
HTTP_CONNECT_TIMEOUT	http-internal.h	4;"	d
HTTP_DEFAULTPORT	http-internal.h	9;"	d
HTTP_MOVEPERM	evhttp.h	11;"	d
HTTP_MOVETEMP	evhttp.h	12;"	d
HTTP_NOCONTENT	evhttp.h	10;"	d
HTTP_NOTFOUND	evhttp.h	15;"	d
HTTP_NOTMODIFIED	evhttp.h	13;"	d
HTTP_OK	evhttp.h	9;"	d
HTTP_PREFIX	http-internal.h	8;"	d
HTTP_READ_TIMEOUT	http-internal.h	6;"	d
HTTP_SERVUNAVAIL	evhttp.h	16;"	d
HTTP_WRITE_TIMEOUT	http-internal.h	5;"	d
INITIAL_NEVENTS	epoll.c	67;"	d	file:
INITIAL_NFILES	epoll.c	66;"	d	file:
ITIMER_PROF	sys/_libevent_time.h	136;"	d
ITIMER_REAL	sys/_libevent_time.h	134;"	d
ITIMER_VIRTUAL	sys/_libevent_time.h	135;"	d
LIST_EMPTY	sys/queue.h	159;"	d
LIST_END	sys/queue.h	158;"	d
LIST_ENTRY	sys/queue.h	148;"	d
LIST_FIRST	sys/queue.h	157;"	d
LIST_FOREACH	sys/queue.h	162;"	d
LIST_HEAD	sys/queue.h	140;"	d
LIST_HEAD_INITIALIZER	sys/queue.h	145;"	d
LIST_INIT	sys/queue.h	170;"	d
LIST_INSERT_AFTER	sys/queue.h	174;"	d
LIST_INSERT_BEFORE	sys/queue.h	182;"	d
LIST_INSERT_HEAD	sys/queue.h	189;"	d
LIST_NEXT	sys/queue.h	160;"	d
LIST_REMOVE	sys/queue.h	196;"	d
LIST_REPLACE	sys/queue.h	203;"	d
MAX_EPOLL_TIMEOUT_MSEC	epoll.c	18;"	d	file:
MAX_NEVENTS	epoll.c	68;"	d	file:
MIN	http.c	25;"	d	file:
MORE_DATA_EXPECTED	http-internal.h	/^	MORE_DATA_EXPECTED = 0,$/;"	e	enum:message_read_status
NEVENT	test_time.c	10;"	d	file:
NI_MAXSERV	test_http.c	155;"	d	file:
REQUEST_CANCELED	http-internal.h	/^	REQUEST_CANCELED = -2$/;"	e	enum:message_read_status
SERVER_CERT	test_http.c	28;"	d	file:
SERVER_KEY	test_http.c	29;"	d	file:
SHUT_WR	test_event.c	45;"	d	file:
SHUT_WR	test_main.c	45;"	d	file:
SIMPLEQ_EMPTY	sys/queue.h	233;"	d
SIMPLEQ_END	sys/queue.h	232;"	d
SIMPLEQ_ENTRY	sys/queue.h	223;"	d
SIMPLEQ_FIRST	sys/queue.h	231;"	d
SIMPLEQ_FOREACH	sys/queue.h	236;"	d
SIMPLEQ_HEAD	sys/queue.h	214;"	d
SIMPLEQ_HEAD_INITIALIZER	sys/queue.h	220;"	d
SIMPLEQ_INIT	sys/queue.h	244;"	d
SIMPLEQ_INSERT_AFTER	sys/queue.h	261;"	d
SIMPLEQ_INSERT_HEAD	sys/queue.h	249;"	d
SIMPLEQ_INSERT_TAIL	sys/queue.h	255;"	d
SIMPLEQ_NEXT	sys/queue.h	234;"	d
SIMPLEQ_REMOVE_HEAD	sys/queue.h	267;"	d
SLIST_EMPTY	sys/queue.h	108;"	d
SLIST_END	sys/queue.h	107;"	d
SLIST_ENTRY	sys/queue.h	97;"	d
SLIST_FIRST	sys/queue.h	106;"	d
SLIST_FOREACH	sys/queue.h	111;"	d
SLIST_HEAD	sys/queue.h	88;"	d
SLIST_HEAD_INITIALIZER	sys/queue.h	93;"	d
SLIST_INIT	sys/queue.h	119;"	d
SLIST_INSERT_AFTER	sys/queue.h	123;"	d
SLIST_INSERT_HEAD	sys/queue.h	128;"	d
SLIST_NEXT	sys/queue.h	109;"	d
SLIST_REMOVE_HEAD	sys/queue.h	133;"	d
SWAP	buffer.c	38;"	d	file:
SWAP	http.c	1347;"	d	file:
TAILQ_EMPTY	sys/queue.h	301;"	d
TAILQ_END	sys/queue.h	294;"	d
TAILQ_ENTRY	event.h	13;"	d
TAILQ_ENTRY	sys/queue.h	284;"	d
TAILQ_FIRST	sys/queue.h	293;"	d
TAILQ_FOREACH	sys/queue.h	304;"	d
TAILQ_FOREACH_REVERSE	sys/queue.h	309;"	d
TAILQ_HEAD	sys/queue.h	275;"	d
TAILQ_HEAD_INITIALIZER	sys/queue.h	281;"	d
TAILQ_INIT	sys/queue.h	317;"	d
TAILQ_INSERT_AFTER	sys/queue.h	339;"	d
TAILQ_INSERT_BEFORE	sys/queue.h	349;"	d
TAILQ_INSERT_HEAD	sys/queue.h	322;"	d
TAILQ_INSERT_TAIL	sys/queue.h	332;"	d
TAILQ_LAST	sys/queue.h	296;"	d
TAILQ_NEXT	sys/queue.h	295;"	d
TAILQ_PREV	sys/queue.h	299;"	d
TAILQ_REMOVE	sys/queue.h	356;"	d
TAILQ_REPLACE	sys/queue.h	365;"	d
TIMER_ABSTIME	sys/_libevent_time.h	159;"	d
TIMER_RELTIME	sys/_libevent_time.h	158;"	d
TIMESPEC_TO_TIMEVAL	sys/_libevent_time.h	61;"	d
TIMEVAL_TO_TIMESPEC	sys/_libevent_time.h	57;"	d
_EVENT_DEFINED_TQENTRY	event.h	12;"	d
_EVENT_H_	event.h	2;"	d
_EVENT_INTERNAL_H_	event-internal.h	2;"	d
_EVHTTP_H_	evhttp.h	2;"	d
_EVSIGNAL_H_	evsignal.h	2;"	d
_EVUTIL_H_	evutil.h	2;"	d
_HTTP_H_	http-internal.h	2;"	d
_LOG_H_	log.h	2;"	d
_MIN_HEAP_H_	min_heap.h	2;"	d
_SYS_QUEUE_H_	sys/queue.h	36;"	d
_SYS_TIME_H_	sys/_libevent_time.h	36;"	d
_evsignal_restore_handler	signal.c	/^_evsignal_restore_handler(struct event_base *base, int evsignal)$/;"	f
_evsignal_set_handler	signal.c	/^_evsignal_set_handler(struct event_base *base,$/;"	f
a	min_heap.h	/^	unsigned n, a;$/;"	m	struct:min_heap
accept_socket	http.c	/^accept_socket(int fd, short what, void *arg)$/;"	f	file:
accept_ssl_socket	http.c	/^accept_ssl_socket(int fd, short what, void *arg)$/;"	f	file:
activequeues	event-internal.h	/^    struct event_list **activequeues;$/;"	m	struct:event_base	typeref:struct:event_base::event_list
add	event-internal.h	/^    int (*add)(void *, struct event *);$/;"	m	struct:eventop
address	http-internal.h	/^    char *address;          \/* address to connect to *\/$/;"	m	struct:evhttp_connection
arg	event.c	/^    void *arg;$/;"	m	struct:event_once	file:
base	http-internal.h	/^    struct event_base *base;$/;"	m	struct:evhttp	typeref:struct:evhttp::event_base
base	http-internal.h	/^    struct event_base *base;$/;"	m	struct:evhttp_connection	typeref:struct:evhttp_connection::event_base
base	test_http.c	/^static struct event_base *base;$/;"	v	typeref:struct:event_base	file:
bind_address	http-internal.h	/^    char *bind_address;     \/* address to use for binding the src *\/$/;"	m	struct:evhttp_connection
bind_ev	http-internal.h	/^    struct event  bind_ev;$/;"	m	struct:evhttp_bound_socket	typeref:struct:evhttp_bound_socket::event
bind_port	http-internal.h	/^    u_short bind_port;      \/* local port for binding the src *\/$/;"	m	struct:evhttp_connection
bind_socket	http.c	/^bind_socket(const char *address, u_short port, int reuse)$/;"	f	file:
bind_socket_ai	http.c	/^bind_socket_ai(struct addrinfo *ai, int reuse)$/;"	f	file:
buffer	event.h	/^	u_char *buffer;$/;"	m	struct:evbuffer
bufferevent	event.h	/^struct bufferevent {$/;"	s
bufferevent_add	evbuffer.c	/^bufferevent_add(struct event *ev, int timeout)$/;"	f	file:
bufferevent_base_set	evbuffer.c	/^bufferevent_base_set(struct event_base *base, struct bufferevent *bufev)$/;"	f
bufferevent_disable	evbuffer.c	/^bufferevent_disable(struct bufferevent *bufev, short event)$/;"	f
bufferevent_enable	evbuffer.c	/^bufferevent_enable(struct bufferevent *bufev, short event)$/;"	f
bufferevent_free	evbuffer.c	/^bufferevent_free(struct bufferevent *bufev)$/;"	f
bufferevent_new	evbuffer.c	/^bufferevent_new(int fd, evbuffercb readcb, evbuffercb writecb,$/;"	f
bufferevent_read_pressure_cb	evbuffer.c	/^bufferevent_read_pressure_cb(struct evbuffer *buf, size_t old, size_t now,$/;"	f
bufferevent_readcb	evbuffer.c	/^bufferevent_readcb(int fd, short event, void *arg)$/;"	f	file:
bufferevent_setcb	evbuffer.c	/^bufferevent_setcb(struct bufferevent *bufev,$/;"	f
bufferevent_ssl_base_set	evbuffer.c	/^bufferevent_ssl_base_set(struct event_base *base, struct ssl_bufferevent *bufev)$/;"	f
bufferevent_ssl_enable	evbuffer.c	/^bufferevent_ssl_enable(struct ssl_bufferevent *bufev, short event)$/;"	f
bufferevent_ssl_new	evbuffer.c	/^bufferevent_ssl_new(int fd, evbuffercb_ssl readcb, evbuffercb_ssl writecb,$/;"	f
bufferevent_ssl_readcb	evbuffer.c	/^bufferevent_ssl_readcb(int fd, short event, void *arg)$/;"	f	file:
bufferevent_ssl_setcb	evbuffer.c	/^bufferevent_ssl_setcb(struct ssl_bufferevent *bufev,$/;"	f
bufferevent_ssl_write	evbuffer.c	/^bufferevent_ssl_write(struct ssl_bufferevent *bufev, const void *data, size_t size)$/;"	f
bufferevent_ssl_writecb	evbuffer.c	/^bufferevent_ssl_writecb(int fd, short event, void *arg)$/;"	f	file:
bufferevent_write	evbuffer.c	/^bufferevent_write(struct bufferevent *bufev, const void *data, size_t size)$/;"	f
bufferevent_writecb	evbuffer.c	/^bufferevent_writecb(int fd, short event, void *arg)$/;"	f	file:
callbacks	http-internal.h	/^    TAILQ_HEAD(httpcbq, evhttp_cb) callbacks;$/;"	m	struct:evhttp
called	test_event.c	/^int called = 0;$/;"	v
called	test_http.c	/^int called = 0;$/;"	v
called	test_main.c	/^int called = 0;$/;"	v
called	test_signal.c	/^int called = 0;$/;"	v
called	test_time.c	/^int called = 0;$/;"	v
cb	event.c	/^    void (*cb)(int, short, void *);$/;"	m	struct:event_once	file:
cb	event.h	/^	void (*cb)(struct evbuffer *, size_t, size_t, void *);$/;"	m	struct:evbuffer
cb	evhttp.h	/^	void (*cb)(struct evhttp_request *, void *);$/;"	m	struct:evhttp_request
cb	http-internal.h	/^    void (*cb)(struct evhttp_connection *, void *);$/;"	m	struct:evhttp_connection
cb	http-internal.h	/^    void (*cb)(struct evhttp_request *req, void *);$/;"	m	struct:evhttp_cb
cb_arg	evhttp.h	/^	void *cb_arg;$/;"	m	struct:evhttp_request
cb_arg	http-internal.h	/^    void *cb_arg;$/;"	m	struct:evhttp_connection
cbarg	event.h	/^	void *cbarg;$/;"	m	struct:evbuffer
cbarg	event.h	/^    void *cbarg;$/;"	m	struct:bufferevent
cbarg	event.h	/^    void *cbarg;$/;"	m	struct:ssl_bufferevent
cbarg	http-internal.h	/^    void *cbarg;$/;"	m	struct:evhttp_cb
chunk_cb	evhttp.h	/^	void (*chunk_cb)(struct evhttp_request *, void *);$/;"	m	struct:evhttp_request
chunked	evhttp.h	/^	int chunked;$/;"	m	struct:evhttp_request
clockinfo	sys/_libevent_time.h	/^struct clockinfo {$/;"	s
close_ev	http-internal.h	/^    struct event close_ev;$/;"	m	struct:evhttp_connection	typeref:struct:evhttp_connection::event
closecb	http-internal.h	/^    void (*closecb)(struct evhttp_connection *, void *);$/;"	m	struct:evhttp_connection
closecb_arg	http-internal.h	/^    void *closecb_arg;$/;"	m	struct:evhttp_connection
connections	http-internal.h	/^    struct evconq connections;$/;"	m	struct:evhttp	typeref:struct:evhttp::evconq
current_base	event.c	/^struct event_base *current_base = NULL;$/;"	v	typeref:struct:event_base
dealloc	event-internal.h	/^    void (*dealloc)(struct event_base *, void *);$/;"	m	struct:eventop
del	event-internal.h	/^    int (*del)(void *, struct event *);$/;"	m	struct:eventop
detect_monotonic	event.c	/^detect_monotonic(void)$/;"	f	file:
dispatch	event-internal.h	/^    int (*dispatch)(struct event_base *, void *, struct timeval *);$/;"	m	struct:eventop
enabled	event.h	/^    short enabled;  \/* events that are currently enabled *\/$/;"	m	struct:bufferevent
enabled	event.h	/^    short enabled;  \/* events that are currently enabled *\/$/;"	m	struct:ssl_bufferevent
epfd	epoll.c	/^    int epfd;$/;"	m	struct:epollop	file:
epoll_add	epoll.c	/^epoll_add    (void *arg, struct event *ev)$/;"	f	file:
epoll_dealloc	epoll.c	/^epoll_dealloc   (struct event_base *base, void *arg)$/;"	f	file:
epoll_del	epoll.c	/^epoll_del    (void *arg, struct event *ev)$/;"	f	file:
epoll_dispatch	epoll.c	/^epoll_dispatch   (struct event_base *base, void *arg, struct timeval *tv)$/;"	f	file:
epoll_init	epoll.c	/^void *epoll_init (struct event_base *base)$/;"	f	file:
epoll_recalc	epoll.c	/^epoll_recalc(struct event_base *base, void *arg, int max)$/;"	f	file:
epollop	epoll.c	/^struct epollop {$/;"	s	file:
epollops	epoll.c	/^const struct eventop epollops = {$/;"	v	typeref:struct:eventop
errorcb	event.h	/^    everrorcb errorcb;$/;"	m	struct:bufferevent
errorcb	event.h	/^    everrorcb_ssl errorcb;$/;"	m	struct:ssl_bufferevent
ev	event.c	/^    struct event ev;$/;"	m	struct:event_once	typeref:struct:event_once::event	file:
ev	http-internal.h	/^    struct event ev;$/;"	m	struct:evhttp_connection	typeref:struct:evhttp_connection::event
ev	test_time.c	/^struct event *ev[NEVENT];$/;"	v	typeref:struct:event
ev_active_next	event.h	/^    TAILQ_ENTRY (event) ev_active_next;$/;"	m	struct:event
ev_arg	event.h	/^    void *ev_arg;$/;"	m	struct:event
ev_base	event.h	/^    struct event_base *ev_base;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::event_base
ev_base	event.h	/^    struct event_base *ev_base;$/;"	m	struct:event	typeref:struct:event::event_base
ev_base	event.h	/^    struct event_base *ev_base;$/;"	m	struct:ssl_bufferevent	typeref:struct:ssl_bufferevent::event_base
ev_callback	event.h	/^    void (*ev_callback)(int, short, void *arg);$/;"	m	struct:event
ev_events	event.h	/^    short ev_events;$/;"	m	struct:event
ev_fd	event.h	/^    int ev_fd;$/;"	m	struct:event
ev_flags	event.h	/^    int ev_flags;$/;"	m	struct:event
ev_int64_t	evutil.h	8;"	d
ev_ncalls	event.h	/^    short ev_ncalls;$/;"	m	struct:event
ev_next	event.h	/^    TAILQ_ENTRY (event) ev_next;$/;"	m	struct:event
ev_pncalls	event.h	/^    short *ev_pncalls;  \/* Allows deletes in callback *\/$/;"	m	struct:event
ev_pri	event.h	/^    int ev_pri;     \/* smaller numbers are higher priority *\/$/;"	m	struct:event
ev_read	event.h	/^    struct event ev_read;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::event
ev_read	event.h	/^    struct event ev_read;$/;"	m	struct:ssl_bufferevent	typeref:struct:ssl_bufferevent::event
ev_res	event.h	/^    int ev_res;     \/* result passed to event callback *\/$/;"	m	struct:event
ev_signal	evsignal.h	/^    struct event ev_signal;$/;"	m	struct:evsignal_info	typeref:struct:evsignal_info::event
ev_signal_added	evsignal.h	/^    int ev_signal_added;$/;"	m	struct:evsignal_info
ev_signal_next	event.h	/^    TAILQ_ENTRY (event) ev_signal_next;$/;"	m	struct:event
ev_signal_pair	evsignal.h	/^    int ev_signal_pair[2];$/;"	m	struct:evsignal_info
ev_timeout	event.h	/^    struct timeval ev_timeout;$/;"	m	struct:event	typeref:struct:event::timeval
ev_uint64_t	evutil.h	7;"	d
ev_write	event.h	/^    struct event ev_write;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::event
ev_write	event.h	/^    struct event ev_write;$/;"	m	struct:ssl_bufferevent	typeref:struct:ssl_bufferevent::event
evbase	event-internal.h	/^    void *evbase;$/;"	m	struct:event_base
evbuffer	event.h	/^struct evbuffer {$/;"	s
evbuffer_add	buffer.c	/^evbuffer_add(struct evbuffer *buf, const void *data, size_t datlen)$/;"	f
evbuffer_add_buffer	buffer.c	/^evbuffer_add_buffer(struct evbuffer *outbuf, struct evbuffer *inbuf)$/;"	f
evbuffer_add_printf	buffer.c	/^evbuffer_add_printf(struct evbuffer *buf, const char *fmt, ...)$/;"	f
evbuffer_add_vprintf	buffer.c	/^evbuffer_add_vprintf(struct evbuffer *buf, const char *fmt, va_list ap)$/;"	f
evbuffer_align	buffer.c	/^evbuffer_align(struct evbuffer *buf)$/;"	f	file:
evbuffer_drain	buffer.c	/^evbuffer_drain(struct evbuffer *buf, size_t len)$/;"	f
evbuffer_expand	buffer.c	/^evbuffer_expand(struct evbuffer *buf, size_t datlen)$/;"	f
evbuffer_find	buffer.c	/^evbuffer_find(struct evbuffer *buffer, const u_char *what, size_t len)$/;"	f
evbuffer_free	buffer.c	/^evbuffer_free(struct evbuffer *buffer)$/;"	f
evbuffer_new	buffer.c	/^evbuffer_new(void)$/;"	f
evbuffer_read	buffer.c	/^evbuffer_read(struct evbuffer *buf, int fd, int howmuch)$/;"	f
evbuffer_readline	buffer.c	/^evbuffer_readline(struct evbuffer *buffer)$/;"	f
evbuffer_remove	buffer.c	/^evbuffer_remove(struct evbuffer *buf, void *data, size_t datlen)$/;"	f
evbuffer_setcb	buffer.c	/^void evbuffer_setcb(struct evbuffer *buffer,$/;"	f
evbuffer_ssl_read	buffer.c	/^evbuffer_ssl_read(struct evbuffer *buf, int fd, int howmuch, SSL *ssl_fd)$/;"	f
evbuffer_ssl_write	buffer.c	/^evbuffer_ssl_write(struct evbuffer *buffer, SSL *fd)$/;"	f
evbuffer_write	buffer.c	/^evbuffer_write(struct evbuffer *buffer, int fd)$/;"	f
evbuffercb	event.h	/^typedef void (*evbuffercb)(struct bufferevent *, void *);$/;"	t
evbuffercb_ssl	event.h	/^typedef void (*evbuffercb_ssl)(struct ssl_bufferevent *, void *);$/;"	t
evcon	evhttp.h	/^	struct evhttp_connection *evcon;$/;"	m	struct:evhttp_request	typeref:struct:evhttp_request::evhttp_connection
event	event.h	/^struct event {$/;"	s
event_active	event.c	/^event_active(struct event *ev, int res, short ncalls)$/;"	f
event_add	event.c	/^event_add(struct event *ev, const struct timeval *tv)$/;"	f
event_base	event-internal.h	/^struct event_base {$/;"	s
event_base_dispatch	event.c	/^event_base_dispatch(struct event_base *event_base)$/;"	f
event_base_free	event.c	/^event_base_free(struct event_base *base)$/;"	f
event_base_loop	event.c	/^event_base_loop(struct event_base *base, int flags)$/;"	f
event_base_loopexit	event.c	/^event_base_loopexit(struct event_base *event_base, const struct timeval *tv)$/;"	f
event_base_new	event.c	/^event_base_new(void)$/;"	f
event_base_once	event.c	/^event_base_once(struct event_base *base, int fd, short events,$/;"	f
event_base_priority_init	event.c	/^event_base_priority_init(struct event_base *base, int npriorities)$/;"	f
event_base_set	event.c	/^event_base_set(struct event_base *base, struct event *ev)$/;"	f
event_break	event-internal.h	/^    int event_break;        \/* Set to terminate loop immediately *\/$/;"	m	struct:event_base
event_count	event-internal.h	/^    int event_count;        \/* counts number of total events *\/$/;"	m	struct:event_base
event_count_active	event-internal.h	/^    int event_count_active; \/* counts number of active events *\/$/;"	m	struct:event_base
event_debug	log.h	14;"	d
event_debug	log.h	16;"	d
event_del	event.c	/^event_del(struct event *ev)$/;"	f
event_dispatch	event.c	/^event_dispatch(void)$/;"	f
event_err	log.c	/^event_err(int eval, const char *fmt, ...)$/;"	f
event_errx	log.c	/^event_errx(int eval, const char *fmt, ...)$/;"	f
event_gotterm	event-internal.h	/^    int event_gotterm;      \/* Set to terminate loop *\/$/;"	m	struct:event_base
event_haveevents	event.c	/^event_haveevents(struct event_base *base)$/;"	f
event_init	event.c	/^event_init(void)$/;"	f
event_initialized	event.h	278;"	d
event_loop	event.c	/^event_loop(int flags)$/;"	f
event_loopexit	event.c	/^event_loopexit(const struct timeval *tv)$/;"	f
event_loopexit_cb	event.c	/^event_loopexit_cb(int fd, short what, void *arg)$/;"	f	file:
event_msgx	log.c	/^event_msgx(const char *fmt, ...)$/;"	f
event_once	event.c	/^event_once(int fd, short events,$/;"	f
event_once	event.c	/^struct event_once {$/;"	s	file:
event_once_cb	event.c	/^event_once_cb(int fd, short events, void *arg)$/;"	f	file:
event_pending	event.c	/^event_pending(struct event *ev, short event, struct timeval *tv)$/;"	f
event_process_active	event.c	/^event_process_active(struct event_base *base)$/;"	f	file:
event_queue_insert	event.c	/^event_queue_insert(struct event_base *base, struct event *ev, int queue)$/;"	f
event_queue_remove	event.c	/^event_queue_remove(struct event_base *base, struct event *ev, int queue)$/;"	f
event_set	event.c	/^event_set(struct event *ev, int fd, short events,$/;"	f
event_tv	event-internal.h	/^    struct timeval event_tv;$/;"	m	struct:event_base	typeref:struct:event_base::timeval
event_warn	log.c	/^event_warn(const char *fmt, ...)$/;"	f
event_warnx	log.c	/^event_warnx(const char *fmt, ...)$/;"	f
event_watermark	event.h	/^struct event_watermark {$/;"	s
eventop	event-internal.h	/^struct eventop {$/;"	s
eventops	event.c	/^static const struct eventop *eventops[] = {$/;"	v	typeref:struct:eventop	file:
eventqueue	event-internal.h	/^    struct event_list eventqueue;$/;"	m	struct:event_base	typeref:struct:event_base::event_list
events	epoll.c	/^    struct epoll_event *events;$/;"	m	struct:epollop	typeref:struct:epollop::epoll_event	file:
evepoll	epoll.c	/^struct evepoll {$/;"	s	file:
everrorcb	event.h	/^typedef void (*everrorcb)(struct bufferevent *, short what, void *);$/;"	t
everrorcb_ssl	event.h	/^typedef void (*everrorcb_ssl)(struct ssl_bufferevent *, short what, void *);$/;"	t
evhttp	http-internal.h	/^struct evhttp {$/;"	s
evhttp_accept_socket	http.c	/^evhttp_accept_socket(struct evhttp *http, int fd)$/;"	f
evhttp_add_event	http.c	/^evhttp_add_event(struct event *ev, int timeout, int default_timeout)$/;"	f	file:
evhttp_add_header	http.c	/^evhttp_add_header(struct evkeyvalq *headers,$/;"	f
evhttp_add_header_internal	http.c	/^evhttp_add_header_internal(struct evkeyvalq *headers,$/;"	f	file:
evhttp_append_to_last_header	http.c	/^evhttp_append_to_last_header(struct evkeyvalq *headers, const char *line)$/;"	f	file:
evhttp_associate_new_request_with_connection	http.c	/^evhttp_associate_new_request_with_connection(struct evhttp_connection *evcon)$/;"	f	file:
evhttp_bind_socket	http.c	/^evhttp_bind_socket(struct evhttp *http, const char *address, u_short port)$/;"	f
evhttp_bound_socket	http-internal.h	/^struct evhttp_bound_socket {$/;"	s
evhttp_cb	http-internal.h	/^struct evhttp_cb {$/;"	s
evhttp_clear_headers	http.c	/^evhttp_clear_headers(struct evkeyvalq *headers)$/;"	f
evhttp_cmd_type	evhttp.h	/^enum evhttp_cmd_type { EVHTTP_REQ_GET, EVHTTP_REQ_POST, EVHTTP_REQ_HEAD };$/;"	g
evhttp_connected	http.c	/^evhttp_connected(struct evhttp_connection *evcon)$/;"	f	file:
evhttp_connection	http-internal.h	/^struct evhttp_connection {$/;"	s
evhttp_connection_connect	http.c	/^evhttp_connection_connect(struct evhttp_connection *evcon)$/;"	f
evhttp_connection_done	http.c	/^evhttp_connection_done(struct evhttp_connection *evcon)$/;"	f	file:
evhttp_connection_error	http-internal.h	/^enum evhttp_connection_error {$/;"	g
evhttp_connection_fail	http.c	/^evhttp_connection_fail(struct evhttp_connection *evcon,$/;"	f
evhttp_connection_free	http.c	/^evhttp_connection_free(struct evhttp_connection *evcon)$/;"	f
evhttp_connection_incoming_fail	http.c	/^evhttp_connection_incoming_fail(struct evhttp_request *req,$/;"	f	file:
evhttp_connection_new	http.c	/^evhttp_connection_new(const char *address, unsigned short port)$/;"	f
evhttp_connection_reset	http.c	/^evhttp_connection_reset(struct evhttp_connection *evcon)$/;"	f
evhttp_connection_retry	http.c	/^evhttp_connection_retry(int fd, short what, void *arg)$/;"	f	file:
evhttp_connection_set_base	http.c	/^void evhttp_connection_set_base(struct evhttp_connection *evcon,$/;"	f
evhttp_connection_set_timeout	http.c	/^evhttp_connection_set_timeout(struct evhttp_connection *evcon,$/;"	f
evhttp_connection_start_detectclose	http.c	/^evhttp_connection_start_detectclose(struct evhttp_connection *evcon)$/;"	f	file:
evhttp_connection_state	http-internal.h	/^enum evhttp_connection_state {$/;"	g
evhttp_connection_stop_detectclose	http.c	/^evhttp_connection_stop_detectclose(struct evhttp_connection *evcon)$/;"	f	file:
evhttp_connectioncb	http.c	/^evhttp_connectioncb(int fd, short what, void *arg)$/;"	f	file:
evhttp_detect_close_cb	http.c	/^evhttp_detect_close_cb(int fd, short what, void *arg)$/;"	f	file:
evhttp_dispatch_callback	http.c	/^evhttp_dispatch_callback(struct httpcbq *callbacks, struct evhttp_request *req)$/;"	f	file:
evhttp_find_header	http.c	/^evhttp_find_header(const struct evkeyvalq *headers, const char *key)$/;"	f
evhttp_free	http.c	/^evhttp_free(struct evhttp* http)$/;"	f
evhttp_get_body	http.c	/^evhttp_get_body(struct evhttp_connection *evcon, struct evhttp_request *req)$/;"	f	file:
evhttp_get_body_length	http.c	/^evhttp_get_body_length(struct evhttp_request *req)$/;"	f	file:
evhttp_get_request	http.c	/^evhttp_get_request(struct evhttp *http, int fd,$/;"	f
evhttp_get_request_connection	http.c	/^evhttp_get_request_connection($/;"	f	file:
evhttp_handle_chunked_read	http.c	/^evhttp_handle_chunked_read(struct evhttp_request *req, struct evbuffer *buf)$/;"	f	file:
evhttp_handle_request	http.c	/^evhttp_handle_request(struct evhttp_request *req, void *arg)$/;"	f	file:
evhttp_header_is_valid_value	http.c	/^evhttp_header_is_valid_value(const char *value)$/;"	f	file:
evhttp_htmlescape	http.c	/^evhttp_htmlescape(const char *html)$/;"	f
evhttp_is_connection_close	http.c	/^evhttp_is_connection_close(int flags, struct evkeyvalq* headers)$/;"	f	file:
evhttp_is_connection_keepalive	http.c	/^evhttp_is_connection_keepalive(struct evkeyvalq* headers)$/;"	f	file:
evhttp_make_header	http.c	/^evhttp_make_header(struct evhttp_connection *evcon, struct evhttp_request *req)$/;"	f
evhttp_make_header_request	http.c	/^evhttp_make_header_request(struct evhttp_connection *evcon,$/;"	f	file:
evhttp_make_header_response	http.c	/^evhttp_make_header_response(struct evhttp_connection *evcon,$/;"	f	file:
evhttp_maybe_add_content_length_header	http.c	/^evhttp_maybe_add_content_length_header(struct evkeyvalq *headers,$/;"	f	file:
evhttp_maybe_add_date_header	http.c	/^evhttp_maybe_add_date_header(struct evkeyvalq *headers)$/;"	f	file:
evhttp_method	http.c	/^evhttp_method(enum evhttp_cmd_type type)$/;"	f	file:
evhttp_new	http.c	/^evhttp_new(struct event_base *base)$/;"	f
evhttp_new_object	http.c	/^evhttp_new_object(void)$/;"	f	file:
evhttp_parse_firstline	http.c	/^evhttp_parse_firstline(struct evhttp_request *req, struct evbuffer *buffer)$/;"	f
evhttp_parse_headers	http.c	/^evhttp_parse_headers(struct evhttp_request *req, struct evbuffer* buffer)$/;"	f
evhttp_parse_request_line	http.c	/^evhttp_parse_request_line(struct evhttp_request *req, char *line)$/;"	f	file:
evhttp_parse_response_line	http.c	/^evhttp_parse_response_line(struct evhttp_request *req, char *line)$/;"	f	file:
evhttp_read	http.c	/^evhttp_read(int fd, short what, void *arg)$/;"	f
evhttp_read_body	http.c	/^evhttp_read_body(struct evhttp_connection *evcon, struct evhttp_request *req)$/;"	f	file:
evhttp_read_firstline	http.c	/^evhttp_read_firstline(struct evhttp_connection *evcon,$/;"	f	file:
evhttp_read_header	http.c	/^evhttp_read_header(struct evhttp_connection *evcon, struct evhttp_request *req)$/;"	f	file:
evhttp_read_trailer	http.c	/^evhttp_read_trailer(struct evhttp_connection *evcon, struct evhttp_request *req)$/;"	f	file:
evhttp_remove_header	http.c	/^evhttp_remove_header(struct evkeyvalq *headers, const char *key)$/;"	f
evhttp_request	evhttp.h	/^struct evhttp_request {$/;"	s
evhttp_request_dispatch	http.c	/^evhttp_request_dispatch(struct evhttp_connection* evcon)$/;"	f	file:
evhttp_request_free	http.c	/^evhttp_request_free(struct evhttp_request *req)$/;"	f
evhttp_request_kind	evhttp.h	/^enum evhttp_request_kind { EVHTTP_REQUEST, EVHTTP_RESPONSE };$/;"	g
evhttp_request_new	http.c	/^evhttp_request_new(void (*cb)(struct evhttp_request *, void *), void *arg)$/;"	f
evhttp_response_code	http.c	/^evhttp_response_code(struct evhttp_request *req, int code, const char *reason)$/;"	f
evhttp_send	http.c	/^evhttp_send(struct evhttp_request *req, struct evbuffer *databuf)$/;"	f	file:
evhttp_send_done	http.c	/^evhttp_send_done(struct evhttp_connection *evcon, void *arg)$/;"	f	file:
evhttp_send_error	http.c	/^evhttp_send_error(struct evhttp_request *req, int error, const char *reason)$/;"	f
evhttp_send_page	http.c	/^evhttp_send_page(struct evhttp_request *req, struct evbuffer *databuf)$/;"	f
evhttp_send_reply	http.c	/^evhttp_send_reply(struct evhttp_request *req, int code, const char *reason,$/;"	f
evhttp_set_cb	http.c	/^evhttp_set_cb(struct evhttp *http, const char *uri,$/;"	f
evhttp_ssl_accept_socket	http.c	/^evhttp_ssl_accept_socket(struct evhttp *http, int fd)$/;"	f
evhttp_ssl_bind_socket	http.c	/^evhttp_ssl_bind_socket(struct evhttp *http, const char *address, u_short port)$/;"	f
evhttp_start_read	http.c	/^evhttp_start_read(struct evhttp_connection *evcon)$/;"	f
evhttp_valid_response_code	http.c	/^evhttp_valid_response_code(int code)$/;"	f	file:
evhttp_write	http.c	/^evhttp_write(int fd, short what, void *arg)$/;"	f
evhttp_write_buffer	http.c	/^evhttp_write_buffer(struct evhttp_connection *evcon,$/;"	f
evhttp_write_connectioncb	http.c	/^evhttp_write_connectioncb(struct evhttp_connection *evcon, void *arg)$/;"	f	file:
evkeyval	event.h	/^struct evkeyval {$/;"	s
evread	epoll.c	/^    struct event *evread;$/;"	m	struct:evepoll	typeref:struct:evepoll::event	file:
evsel	event-internal.h	/^    const struct eventop *evsel;$/;"	m	struct:event_base	typeref:struct:event_base::eventop
evsigcaught	evsignal.h	/^    sig_atomic_t evsigcaught[NSIG];$/;"	m	struct:evsignal_info
evsigevents	evsignal.h	/^    struct event_list evsigevents[NSIG];$/;"	m	struct:evsignal_info	typeref:struct:evsignal_info::event_list
evsignal_add	signal.c	/^int evsignal_add(struct event *ev)$/;"	f
evsignal_base	signal.c	/^struct event_base *evsignal_base = NULL;$/;"	v	typeref:struct:event_base
evsignal_caught	evsignal.h	/^    volatile sig_atomic_t evsignal_caught;$/;"	m	struct:evsignal_info
evsignal_cb	signal.c	/^evsignal_cb(int fd, short what, void *arg)$/;"	f	file:
evsignal_dealloc	signal.c	/^evsignal_dealloc(struct event_base *base)$/;"	f
evsignal_del	signal.c	/^evsignal_del(struct event *ev)$/;"	f
evsignal_handler	signal.c	/^evsignal_handler(int sig)$/;"	f	file:
evsignal_info	evsignal.h	/^struct evsignal_info {$/;"	s
evsignal_init	signal.c	/^evsignal_init(struct event_base *base)$/;"	f
evsignal_process	signal.c	/^evsignal_process(struct event_base *base)$/;"	f
evtimer_add	event.h	83;"	d
evtimer_del	event.h	84;"	d
evtimer_set	event.h	86;"	d
evutil_getenv	evutil.c	/^evutil_getenv(const char *varname)$/;"	f
evutil_gettimeofday	evutil.h	28;"	d
evutil_make_socket_nonblocking	evutil.c	/^evutil_make_socket_nonblocking(int fd)$/;"	f
evutil_snprintf	evutil.c	/^evutil_snprintf(char *buf, size_t buflen, const char *format, ...)$/;"	f
evutil_socketpair	evutil.c	/^evutil_socketpair(int family, int type, int protocol, int fd[2])$/;"	f
evutil_strtoll	evutil.c	/^evutil_strtoll(const char *s, char **endptr, int base)$/;"	f
evutil_timeradd	evutil.h	31;"	d
evutil_timeradd	evutil.h	34;"	d
evutil_timerclear	evutil.h	55;"	d
evutil_timerclear	evutil.h	57;"	d
evutil_timercmp	evutil.h	62;"	d
evutil_timersub	evutil.h	32;"	d
evutil_timersub	evutil.h	43;"	d
evutil_vsnprintf	evutil.c	/^evutil_vsnprintf(char *buf, size_t buflen, const char *format, va_list ap)$/;"	f
evwrite	epoll.c	/^    struct event *evwrite;$/;"	m	struct:evepoll	typeref:struct:evepoll::event	file:
fd	http-internal.h	/^    int fd;$/;"	m	struct:evhttp_connection
fds	epoll.c	/^    struct evepoll *fds;$/;"	m	struct:epollop	typeref:struct:epollop::evepoll	file:
flags	evhttp.h	/^	int flags;$/;"	m	struct:evhttp_request
flags	http-internal.h	/^    int flags;$/;"	m	struct:evhttp_connection
gencb	http-internal.h	/^    void (*gencb)(struct evhttp_request *req, void *);$/;"	m	struct:evhttp
gencbarg	http-internal.h	/^    void *gencbarg;$/;"	m	struct:evhttp
get_ssl_request	test_http.c	/^get_ssl_request()$/;"	f
gettime	event.c	/^gettime(struct event_base *base, struct timeval *tp)$/;"	f	file:
high	event.h	/^    size_t high;$/;"	m	struct:event_watermark
html_replace	http.c	/^html_replace(char ch, char *buf)$/;"	f	file:
http	test_http.c	/^static struct evhttp *http;$/;"	v	typeref:struct:evhttp	file:
http_base_test	test_http.c	/^http_base_test(void)$/;"	f	file:
http_basic_cb	test_http.c	/^http_basic_cb(struct evhttp_request *req, void *arg)$/;"	f
http_connect	test_http.c	/^http_connect(const char *address, u_short port)$/;"	f	file:
http_errorcb	test_http.c	/^http_errorcb(struct bufferevent *bev, short what, void *arg)$/;"	f	file:
http_errorcb_ssl	test_http.c	/^http_errorcb_ssl(struct ssl_bufferevent *bev, short what, void *arg)$/;"	f	file:
http_readcb	test_http.c	/^http_readcb(struct bufferevent *bev, void *arg)$/;"	f	file:
http_readcb_ssl	test_http.c	/^http_readcb_ssl(struct ssl_bufferevent *bev, void *arg)$/;"	f	file:
http_server	http-internal.h	/^    struct evhttp *http_server;$/;"	m	struct:evhttp_connection	typeref:struct:evhttp_connection::evhttp
http_setup	test_http.c	/^http_setup(short *pport, struct event_base *base)$/;"	f	file:
http_writecb	test_http.c	/^http_writecb(struct bufferevent *bev, void *arg)$/;"	f	file:
http_writecb_ssl	test_http.c	/^http_writecb_ssl(struct ssl_bufferevent *bev, void *arg)$/;"	f	file:
hz	sys/_libevent_time.h	/^	int	hz;		\/* clock frequency *\/$/;"	m	struct:clockinfo
init	event-internal.h	/^    void *(*init)(struct event_base *);$/;"	m	struct:eventop
input	event.h	/^    struct evbuffer *input;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::evbuffer
input	event.h	/^    struct evbuffer *input;$/;"	m	struct:ssl_bufferevent	typeref:struct:ssl_bufferevent::evbuffer
input_buffer	evhttp.h	/^	struct evbuffer *input_buffer;	\/* read data *\/$/;"	m	struct:evhttp_request	typeref:struct:evhttp_request::evbuffer
input_buffer	http-internal.h	/^    struct evbuffer *input_buffer;$/;"	m	struct:evhttp_connection	typeref:struct:evhttp_connection::evbuffer
input_headers	evhttp.h	/^	struct evkeyvalq *input_headers;$/;"	m	struct:evhttp_request	typeref:struct:evhttp_request::evkeyvalq
it_interval	sys/_libevent_time.h	/^	struct	timeval it_interval;	\/* timer interval *\/$/;"	m	struct:itimerval	typeref:struct:itimerval::timeval
it_value	sys/_libevent_time.h	/^	struct	timeval it_value;	\/* current value *\/$/;"	m	struct:itimerval	typeref:struct:itimerval::timeval
itimerval	sys/_libevent_time.h	/^struct	itimerval {$/;"	s
key	event.h	/^	char *key;$/;"	m	struct:evkeyval
kind	evhttp.h	/^	enum evhttp_request_kind kind;$/;"	m	struct:evhttp_request	typeref:enum:evhttp_request::evhttp_request_kind
low	event.h	/^    size_t low;$/;"	m	struct:event_watermark
main	test_event.c	/^main (int argc, char **argv)$/;"	f
main	test_http.c	/^main (int argc, char **argv)$/;"	f
main	test_main.c	/^main (int argc, char **argv)$/;"	f
main	test_signal.c	/^main (int argc, char **argv)$/;"	f
main	test_time.c	/^int main(int argv ,char* agrs[])$/;"	f
major	evhttp.h	/^	char major;			\/* HTTP Major number *\/$/;"	m	struct:evhttp_request
make_addrinfo	http.c	/^make_addrinfo(const char *address, u_short port)$/;"	f	file:
message_read_status	http-internal.h	/^enum message_read_status {$/;"	g
min_heap	min_heap.h	/^typedef struct min_heap$/;"	s
min_heap_ctor	min_heap.h	/^void min_heap_ctor(min_heap_t* s) { s->p = 0; s->n = 0; s->a = 0; }$/;"	f
min_heap_dtor	min_heap.h	/^void min_heap_dtor(min_heap_t* s) { free(s->p); }$/;"	f
min_heap_elem_greater	min_heap.h	/^int min_heap_elem_greater(struct event *a, struct event *b)$/;"	f
min_heap_elem_init	min_heap.h	/^void min_heap_elem_init(struct event* e) { e->min_heap_idx = -1; }$/;"	f
min_heap_empty	min_heap.h	/^int min_heap_empty(min_heap_t* s) { return 0u == s->n; }$/;"	f
min_heap_erase	min_heap.h	/^int min_heap_erase(min_heap_t* s, struct event* e)$/;"	f
min_heap_idx	event.h	/^    unsigned int min_heap_idx;  \/* for managing timeouts *\/$/;"	m	struct:event
min_heap_pop	min_heap.h	/^struct event* min_heap_pop(min_heap_t* s)$/;"	f
min_heap_push	min_heap.h	/^int min_heap_push(min_heap_t* s, struct event* e)$/;"	f
min_heap_reserve	min_heap.h	/^int min_heap_reserve(min_heap_t* s, unsigned n)$/;"	f
min_heap_shift_down_	min_heap.h	/^void min_heap_shift_down_(min_heap_t* s, unsigned hole_index, struct event* e)$/;"	f
min_heap_shift_up_	min_heap.h	/^void min_heap_shift_up_(min_heap_t* s, unsigned hole_index, struct event* e)$/;"	f
min_heap_size	min_heap.h	/^unsigned min_heap_size(min_heap_t* s) { return s->n; }$/;"	f
min_heap_t	min_heap.h	/^} min_heap_t;$/;"	t	typeref:struct:min_heap
min_heap_top	min_heap.h	/^struct event* min_heap_top(min_heap_t* s) { return s->n ? *s->p : 0; }$/;"	f
minor	evhttp.h	/^	char minor;			\/* HTTP Minor number *\/$/;"	m	struct:evhttp_request
misalign	event.h	/^	size_t misalign;$/;"	m	struct:evbuffer
n	min_heap.h	/^	unsigned n, a;$/;"	m	struct:min_heap
nactivequeues	event-internal.h	/^    int nactivequeues;$/;"	m	struct:event_base
name	event-internal.h	/^    const char *name;$/;"	m	struct:eventop
name_from_addr	http.c	/^name_from_addr(struct sockaddr *sa, socklen_t salen,$/;"	f	file:
need_reinit	event-internal.h	/^    int need_reinit;$/;"	m	struct:eventop
nevents	epoll.c	/^    int nevents;$/;"	m	struct:epollop	file:
next	event.h	/^	TAILQ_ENTRY(evkeyval) next;$/;"	m	struct:evkeyval
next	evhttp.h	/^	}       next;$/;"	m	struct:evhttp_request	typeref:struct:evhttp_request::__anon1
next	http-internal.h	/^    TAILQ_ENTRY(evhttp_cb) next;$/;"	m	struct:evhttp_cb
nfds	epoll.c	/^    int nfds;$/;"	m	struct:epollop	file:
ntoread	evhttp.h	/^	uint64_t ntoread;$/;"	m	struct:evhttp_request
off	event.h	/^	size_t off;$/;"	m	struct:evbuffer
orig_buffer	event.h	/^	u_char *orig_buffer;$/;"	m	struct:evbuffer
output	event.h	/^    struct evbuffer *output;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::evbuffer
output	event.h	/^    struct evbuffer *output;$/;"	m	struct:ssl_bufferevent	typeref:struct:ssl_bufferevent::evbuffer
output_buffer	evhttp.h	/^	struct evbuffer *output_buffer;	\/* outgoing post or data *\/$/;"	m	struct:evhttp_request	typeref:struct:evhttp_request::evbuffer
output_buffer	http-internal.h	/^    struct evbuffer *output_buffer;$/;"	m	struct:evhttp_connection	typeref:struct:evhttp_connection::evbuffer
output_headers	evhttp.h	/^	struct evkeyvalq *output_headers;$/;"	m	struct:evhttp_request	typeref:struct:evhttp_request::evkeyvalq
p	min_heap.h	/^	struct event** p;$/;"	m	struct:min_heap	typeref:struct:min_heap::event
port	http-internal.h	/^    u_short port;$/;"	m	struct:evhttp_connection
profhz	sys/_libevent_time.h	/^	int	profhz;		\/* profiling clock frequency *\/$/;"	m	struct:clockinfo
rand_int	test_time.c	/^rand_int(int n)$/;"	f	file:
read_cb	test_event.c	/^read_cb(int fd, short event, void *arg)$/;"	f	file:
read_cb	test_main.c	/^read_cb(int fd, short event, void *arg)$/;"	f	file:
readcb	event.h	/^    evbuffercb readcb;$/;"	m	struct:bufferevent
readcb	event.h	/^    evbuffercb_ssl readcb;$/;"	m	struct:ssl_bufferevent
remote_host	evhttp.h	/^	char *remote_host;$/;"	m	struct:evhttp_request
remote_port	evhttp.h	/^	u_short remote_port;$/;"	m	struct:evhttp_request
requests	http-internal.h	/^    TAILQ_HEAD(evcon_requestq, evhttp_request) requests;$/;"	m	struct:evhttp_connection
response_code	evhttp.h	/^	int response_code;		\/* HTTP Response code *\/$/;"	m	struct:evhttp_request
response_code_line	evhttp.h	/^	char *response_code_line;	\/* Readable response *\/$/;"	m	struct:evhttp_request
retry_cnt	http-internal.h	/^    int retry_cnt;          \/* retry count *\/$/;"	m	struct:evhttp_connection
retry_max	http-internal.h	/^    int retry_max;          \/* maximum number of retries *\/$/;"	m	struct:evhttp_connection
sh_old	evsignal.h	/^    struct sigaction **sh_old;$/;"	m	struct:evsignal_info	typeref:struct:evsignal_info::sigaction
sh_old_max	evsignal.h	/^    int sh_old_max;$/;"	m	struct:evsignal_info
sig	event-internal.h	/^    struct evsignal_info sig;$/;"	m	struct:event_base	typeref:struct:event_base::evsignal_info
signal_cb	test_signal.c	/^signal_cb(int fd, short event, void *arg)$/;"	f	file:
socket_connect	http.c	/^socket_connect(int fd, const char *address, unsigned short port)$/;"	f	file:
sockets	http-internal.h	/^    TAILQ_HEAD(boundq, evhttp_bound_socket) sockets;$/;"	m	struct:evhttp
ssl_bufferevent	event.h	/^struct ssl_bufferevent {$/;"	s
ssl_client_test	test_http.c	/^ssl_client_test(char *pchar)$/;"	f	file:
ssl_fd	event.h	/^	SSL *ssl_fd;$/;"	m	struct:ssl_bufferevent
ssl_server_test	test_http.c	/^ssl_server_test()$/;"	f	file:
state	http-internal.h	/^    enum evhttp_connection_state state;$/;"	m	struct:evhttp_connection	typeref:enum:evhttp_connection::evhttp_connection_state
stathz	sys/_libevent_time.h	/^	int	stathz;		\/* statistics clock frequency *\/$/;"	m	struct:clockinfo
test_ok	evbuffer.c	/^int test_ok = 0;$/;"	v
test_ok	test_http.c	/^int test_ok;$/;"	v
test_okay	test_event.c	/^int test_okay = 1;$/;"	v
test_okay	test_main.c	/^int test_okay = 1;$/;"	v
tick	sys/_libevent_time.h	/^	int	tick;		\/* micro-seconds per hz tick *\/$/;"	m	struct:clockinfo
tickadj	sys/_libevent_time.h	/^	int	tickadj;	\/* clock skew rate for adjtime() *\/$/;"	m	struct:clockinfo
time_cb	test_time.c	/^time_cb(int fd, short event, void *arg)$/;"	f	file:
timeheap	event-internal.h	/^    struct min_heap timeheap;$/;"	m	struct:event_base	typeref:struct:event_base::min_heap
timeout	http-internal.h	/^    int timeout;            \/* timeout in seconds for events *\/$/;"	m	struct:evhttp_connection
timeout	http-internal.h	/^    int timeout;$/;"	m	struct:evhttp
timeout_correct	event.c	/^timeout_correct(struct event_base *base, struct timeval *tv)$/;"	f	file:
timeout_next	event.c	/^timeout_next(struct event_base *base, struct timeval **tv_p)$/;"	f	file:
timeout_process	event.c	/^timeout_process(struct event_base *base)$/;"	f
timeout_read	event.h	/^    int timeout_read;   \/* in seconds *\/$/;"	m	struct:bufferevent
timeout_read	event.h	/^    int timeout_read;   \/* in seconds *\/$/;"	m	struct:ssl_bufferevent
timeout_write	event.h	/^    int timeout_write;  \/* in seconds *\/$/;"	m	struct:bufferevent
timeout_write	event.h	/^    int timeout_write;  \/* in seconds *\/$/;"	m	struct:ssl_bufferevent
timeradd	sys/_libevent_time.h	85;"	d
timerclear	sys/_libevent_time.h	79;"	d
timercmp	sys/_libevent_time.h	81;"	d
timerisset	sys/_libevent_time.h	80;"	d
timersub	sys/_libevent_time.h	94;"	d
timespec	sys/_libevent_time.h	/^struct timespec {$/;"	s
timespecadd	sys/_libevent_time.h	111;"	d
timespecclear	sys/_libevent_time.h	105;"	d
timespeccmp	sys/_libevent_time.h	107;"	d
timespecisset	sys/_libevent_time.h	106;"	d
timespecsub	sys/_libevent_time.h	120;"	d
timeval	sys/_libevent_time.h	/^struct timeval {$/;"	s
timezone	sys/_libevent_time.h	/^struct timezone {$/;"	s
totallen	event.h	/^	size_t totallen;$/;"	m	struct:evbuffer
tqe_next	evhttp.h	/^		struct evhttp_request *tqe_next;$/;"	m	struct:evhttp_request::__anon1	typeref:struct:evhttp_request::__anon1::evhttp_request
tqe_prev	evhttp.h	/^		struct evhttp_request **tqe_prev;$/;"	m	struct:evhttp_request::__anon1	typeref:struct:evhttp_request::__anon1::evhttp_request
tv_cache	event-internal.h	/^    struct timeval tv_cache;$/;"	m	struct:event_base	typeref:struct:event_base::timeval
tv_nsec	sys/_libevent_time.h	/^	long	tv_nsec;	\/* and nanoseconds *\/$/;"	m	struct:timespec
tv_sec	sys/_libevent_time.h	/^	long	tv_sec;		\/* seconds *\/$/;"	m	struct:timeval
tv_sec	sys/_libevent_time.h	/^	time_t	tv_sec;		\/* seconds *\/$/;"	m	struct:timespec
tv_usec	sys/_libevent_time.h	/^	long	tv_usec;	\/* and microseconds *\/$/;"	m	struct:timeval
type	evhttp.h	/^	enum evhttp_cmd_type type;$/;"	m	struct:evhttp_request	typeref:enum:evhttp_request::evhttp_cmd_type
tz_dsttime	sys/_libevent_time.h	/^	int	tz_dsttime;	\/* type of dst correction *\/$/;"	m	struct:timezone
tz_minuteswest	sys/_libevent_time.h	/^	int	tz_minuteswest;	\/* minutes west of Greenwich *\/$/;"	m	struct:timezone
uri	evhttp.h	/^	char *uri;			\/* uri after HTTP request was parsed *\/$/;"	m	struct:evhttp_request
use_monotonic	event.c	/^static int use_monotonic;$/;"	v	file:
va_copy	buffer.c	101;"	d	file:
value	event.h	/^	char *value;$/;"	m	struct:evkeyval
what	http-internal.h	/^    char *what;$/;"	m	struct:evhttp_cb
wm_read	event.h	/^    struct event_watermark wm_read;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::event_watermark
wm_read	event.h	/^    struct event_watermark wm_read;$/;"	m	struct:ssl_bufferevent	typeref:struct:ssl_bufferevent::event_watermark
wm_write	event.h	/^    struct event_watermark wm_write;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::event_watermark
wm_write	event.h	/^    struct event_watermark wm_write;$/;"	m	struct:ssl_bufferevent	typeref:struct:ssl_bufferevent::event_watermark
writecb	event.h	/^    evbuffercb writecb;$/;"	m	struct:bufferevent
writecb	event.h	/^    evbuffercb_ssl writecb;$/;"	m	struct:ssl_bufferevent
